#!/usr/bin/env python3
# coding: utf-8

# Three-sided Unfair Dice into other RV distributions
#
# IE531: Algorithms for Data Analytics
# Written by Prof. R.S. Sreenivas
#
import sys
import argparse
import random
import numpy as np
import time
import math
import matplotlib.pyplot as plt
from scipy.stats import uniform
sys.setrecursionlimit(3000)


# Some constants -- "heads" is 1 and "tails" is 0
HEADS = 1
TAILS = 0

# reading the number of trials on command line
#no_of_trials = 1000
no_of_trials = int(sys.argv[1])+0

# assign a random value for the probability of seeing a "1" (p1), "2" (p2) or "3" (p3) for
# the 3-sided unfair dice such that (p1, p2, p3) is uniformly distributed over the surface
# p1+p2+p3 = 1, where p1, p2, p3 are non-negative real numbers
def assign_probabilities_to_unfair_three_sided_dice() :
    # FILL CODE HERE
    x = []
    for i in range(2):
      #gives two random numbers from 0 to 1
      x.extend([np.random.uniform(low = 0, high = 1)])
    #assigns the first prob
    x1 = abs(x[0])
    #assigns the second probability
    x2 = abs(x[1] - x[0])
    x3 = abs(1 - x1 - x2)
    x = [x1, x2, x3]
    #sort all the probabilities
    x = np.sort(x)
    prob_of_one = x[0]
    prob_of_two = x[1]
    prob_of_three = x[2]
    #in case if something wrong
    if (x[0] + x[1] + x[2] != 0):
      print("something went wrong")
    print(prob_of_one, prob_of_two, prob_of_three)
    return prob_of_one, prob_of_two, prob_of_three

# This function simulates a single toss of the unfair 3-sided dice
def toss_of_three_sided_unfair_dice(p1, p2, p3) :
    x = np.random.uniform()
    if (x < p1) :
        return 1
    else :
        if (x < p2) :
            return 2
        else :
            return 3

# This function simulates a fair-coin using the unfair 3-sided dice
def simulate_fair_coin_from_unfair_three_sided_dice(p1, p2, p3) :
    # FILL Code here
    # figure out how to convert the outcome of the unfair 3-sided dice
    # into an outcome from a Fair Coin
    l = []
    side6 = toss_of_three_sided_unfair_dice(p1, p2, p3)
    side7 = toss_of_three_sided_unfair_dice(p1, p2, p3)
    #if a second toss gives the same number as the first toss, we are going to toss again
    while (side7 == side6):
      side7 = toss_of_three_sided_unfair_dice(p1, p2, p3)
    side8 = toss_of_three_sided_unfair_dice(p1, p2, p3)
    # if a third toss give the number as the first and second tosses gave us, we are going to toss again
    while(side8 == side7 or side8 == side6):
      side8 = toss_of_three_sided_unfair_dice(p1, p2, p3)

    l = [side6, side7, side8]
    #there are 6 variations on how the dice sides can be placed
    if (l == [1,2,3] or l == [3,2,1] or l == [1, 3, 2]):
      return HEADS
    else: #( l == [3, 1, 2] or l == [2, 1, 3] or l == [2, 3, 1]):
      return TAILS


# get a U.I.I.D RV by making the unfair three sided dice into a fair coin... and tossing the
# resulting fair-coin 32 times to get discrete RV that is uniformly distributed over the
# integers in [0, 2^{32}-1]... dividing the resulting integer by 2^{32}-1 gives us (effectively)
# a U.I.I.D. RV
def get_uiid_rvs_by_tossing_the_unfair_three_sided_dice_32_times(p1, p2, p3) :
    result = 0
    for i in range(0, 32) :
        if (simulate_fair_coin_from_unfair_three_sided_dice(p1, p2, p3) == HEADS) :
            result = result | (1 << i)
        else :
            result = result | (0 << i)
    return float(result/(pow(2,32)-1))

# plotting the histogram of the continuous RV generated by tossing the unfair three sided dice
# sufficient number of times till we get 32 fair-coin-tosses, which are then converted into a
# number in the unit-interval

# assigning probabilities to unfair three sided dice
p1, p2, p3 = assign_probabilities_to_unfair_three_sided_dice()

z = []
for i in range(0,no_of_trials) :
    z.extend([get_uiid_rvs_by_tossing_the_unfair_three_sided_dice_32_times(p1, p2, p3)])
plt.hist(z, bins=50)
plt.ylabel('Histogram for ' + str(no_of_trials) + ' trials');
plt.savefig("UIID_Histogram.pdf", bbox_inches='tight')

# converting (multiple) tosses of the unfair 3-sided Dice into a unit-normal distribution
# using the Box-Muller Method
a = []
for i in range(0,no_of_trials) :
    p = get_uiid_rvs_by_tossing_the_unfair_three_sided_dice_32_times(p1, p2, p3)
    q = get_uiid_rvs_by_tossing_the_unfair_three_sided_dice_32_times(p1, p2, p3)
    theta = 2*math.pi*p
    r = np.sqrt(-2*math.log(q))
    a.extend([r*math.cos(theta)])
    a.extend([r*math.sin(theta)])
plt.hist(a, bins=50)
plt.ylabel('Histogram for ' + str(2*no_of_trials) + ' trials');
plt.savefig("Unit_Normal_Histogram.pdf", bbox_inches='tight')
